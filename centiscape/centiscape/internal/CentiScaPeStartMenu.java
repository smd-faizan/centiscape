package org.cytoscape.centiscape.internal;
/*
 * CentiScaPeStartMenu.java
 *
 * Created on 13 novembre 2007, 13.37
 */

/**
 *
 * @author scardoni
 */
import java.awt.Component;
import java.io.IOException;
import java.io.StringWriter;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import javax.swing.Icon;
import javax.swing.JOptionPane;
import org.cytoscape.application.CyApplicationManager;
import org.cytoscape.application.swing.CySwingApplication;
import org.cytoscape.application.swing.CytoPanelComponent;
import org.cytoscape.application.swing.CytoPanelName;
import org.cytoscape.centiscape.internal.visualizer.Centrality;
import org.cytoscape.centiscape.internal.visualizer.ImplCentrality;
import org.cytoscape.model.CyColumn;
import org.cytoscape.model.CyEdge;
import org.cytoscape.model.CyNetwork;
import org.cytoscape.model.CyNode;
import org.cytoscape.model.CyTable;
import org.cytoscape.view.model.CyNetworkView;

public class CentiScaPeStartMenu extends javax.swing.JPanel implements CytoPanelComponent {

    private int numberofcentralities = 12;
    private boolean calculating = false;
    private CyNetwork lastworkednetwork;
    private CyNetworkView lastworkedview;
    private CentiScaPeCore centiscapecore;
    CyApplicationManager cyApplicationManager;
    CySwingApplication cyDesktopService;
    CyNetwork currentnetwork;
    CyNetworkView currentnetworkview;
    public CyActivator cyactivator;
    private double inizio;
    private double fine;
    private boolean[] CheckedCentralities = new boolean[numberofcentralities];
    public String[] directedCentralities;
    private CentiScaPeAlgorithm CentiScaPealg;
    private CentiScaPeThreadEngine ThrEng;
    public Vector<Centrality> VectorResults = new Vector();
    private boolean[] LoadedCentralities = new boolean[numberofcentralities];
    CentiScaPeDirectedThreadEngine Thrd;
    public Boolean isWeighted;
    static String edgeWeightAttribute;
    static Class<?> attrtype;

    public CentiScaPeStartMenu(CyActivator cyactivator, CentiScaPeCore centiscapecore) {
        initComponents();
        this.cyactivator = cyactivator;
        this.centiscapecore = centiscapecore;
        lastworkednetwork = null;
        lastworkedview = null;
        cyApplicationManager = centiscapecore.getCyApplicationManager();
        cyDesktopService = centiscapecore.getCyDesktopService();
        CentiScaPealg = new CentiScaPeAlgorithm(centiscapecore);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        DiameterCheckBox = new javax.swing.JCheckBox();
        AverageDistanceCheckBox = new javax.swing.JCheckBox();
        DegreeCheckBox = new javax.swing.JCheckBox();
        EccentricityCheckBox = new javax.swing.JCheckBox();
        RadialityCheckBox = new javax.swing.JCheckBox();
        ClosenessCheckBox = new javax.swing.JCheckBox();
        StressCheckBox = new javax.swing.JCheckBox();
        BetweennessCheckBox = new javax.swing.JCheckBox();
        CentroidCheckBox = new javax.swing.JCheckBox();
        selectallButton = new javax.swing.JButton();
        unselectallButton = new javax.swing.JButton();
        ClosenessHelpButton = new javax.swing.JButton();
        AverageHelpButton = new javax.swing.JButton();
        EccentricityHelpButton = new javax.swing.JButton();
        DiameterHelpButton = new javax.swing.JButton();
        DegreeHelpButton = new javax.swing.JButton();
        RadialityHelpButton = new javax.swing.JButton();
        StressHelpButton = new javax.swing.JButton();
        BetweennessHelpButton = new javax.swing.JButton();
        CentroidValueHelpButton = new javax.swing.JButton();
        EigenVectorCheckBox = new javax.swing.JCheckBox();
        EigenVectorHelpButton = new javax.swing.JButton();
        BridgingCheckBox = new javax.swing.JCheckBox();
        BirdgingHelpButton = new javax.swing.JButton();
        EdgeBetweennessCheckBox = new javax.swing.JCheckBox();
        EdgeBetweennessHelpButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        StartButton = new javax.swing.JButton();
        StopButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jProgressBar1 = new javax.swing.JProgressBar();
        ExitButton = new javax.swing.JButton();
        undirectedRadioButton = new javax.swing.JRadioButton();
        directedRaidioButton = new javax.swing.JRadioButton();
        startclient = new javax.swing.JButton();
        jLabelServerResponse = new javax.swing.JLabel();
        WeightedCheckBox = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        LoadAttributesButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setRequestFocusEnabled(false);

        jScrollPane1.setToolTipText("");
        jScrollPane1.setMaximumSize(new java.awt.Dimension(400, 32767));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(300, 860));

        jPanel5.setBorder(new javax.swing.border.MatteBorder(null));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Implemented centralities"));
        jPanel1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

        DiameterCheckBox.setText("Diameter");
        DiameterCheckBox.setToolTipText("");
        DiameterCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        DiameterCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiameterCheckBoxActionPerformed(evt);
            }
        });

        AverageDistanceCheckBox.setText("Average Distance");
        AverageDistanceCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        AverageDistanceCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AverageDistanceCheckBoxActionPerformed(evt);
            }
        });

        DegreeCheckBox.setText("Degree");
        DegreeCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        DegreeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DegreeCheckBoxActionPerformed(evt);
            }
        });

        EccentricityCheckBox.setText("Eccentricity");
        EccentricityCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        EccentricityCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EccentricityCheckBoxActionPerformed(evt);
            }
        });

        RadialityCheckBox.setText("Radiality");
        RadialityCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        RadialityCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadialityCheckBoxActionPerformed(evt);
            }
        });

        ClosenessCheckBox.setText("Closeness");
        ClosenessCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        ClosenessCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClosenessCheckBoxActionPerformed(evt);
            }
        });

        StressCheckBox.setText("Stress");
        StressCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        StressCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StressCheckBoxActionPerformed(evt);
            }
        });

        BetweennessCheckBox.setText("Betweenness");
        BetweennessCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BetweennessCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BetweennessCheckBoxActionPerformed(evt);
            }
        });

        CentroidCheckBox.setText("Centroid Value");
        CentroidCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        CentroidCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CentroidCheckBoxActionPerformed(evt);
            }
        });

        selectallButton.setText("Select All");
        selectallButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectallButtonMouseClicked(evt);
            }
        });
        selectallButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectallButtonActionPerformed(evt);
            }
        });

        unselectallButton.setText("Unselect All");
        unselectallButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unselectallButtonActionPerformed(evt);
            }
        });

        ClosenessHelpButton.setText("?");
        ClosenessHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClosenessHelpButtonActionPerformed(evt);
            }
        });

        AverageHelpButton.setText("?");
        AverageHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AverageHelpButtonActionPerformed(evt);
            }
        });

        EccentricityHelpButton.setText("?");
        EccentricityHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EccentricityHelpButtonActionPerformed(evt);
            }
        });

        DiameterHelpButton.setText("?");
        DiameterHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiameterHelpButtonActionPerformed(evt);
            }
        });

        DegreeHelpButton.setText("?");
        DegreeHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DegreeHelpButtonActionPerformed(evt);
            }
        });

        RadialityHelpButton.setText("?");
        RadialityHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadialityHelpButtonActionPerformed(evt);
            }
        });

        StressHelpButton.setText("?");
        StressHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StressHelpButtonActionPerformed(evt);
            }
        });

        BetweennessHelpButton.setText("?");
        BetweennessHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BetweennessHelpButtonActionPerformed(evt);
            }
        });

        CentroidValueHelpButton.setText("?");
        CentroidValueHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CentroidValueHelpButtonActionPerformed(evt);
            }
        });

        EigenVectorCheckBox.setText("EigenVector");
        EigenVectorCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        EigenVectorCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EigenVectorCheckBoxActionPerformed(evt);
            }
        });

        EigenVectorHelpButton.setText("?");
        EigenVectorHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EigenVectorHelpButtonActionPerformed(evt);
            }
        });

        BridgingCheckBox.setText("Bridging");
        BridgingCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BridgingCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BridgingCheckBoxActionPerformed(evt);
            }
        });

        BirdgingHelpButton.setText("?");
        BirdgingHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BirdgingHelpButtonActionPerformed(evt);
            }
        });

        EdgeBetweennessCheckBox.setText("Edge Betweenness");
        EdgeBetweennessCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        EdgeBetweennessCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EdgeBetweennessCheckBoxActionPerformed(evt);
            }
        });

        EdgeBetweennessHelpButton.setText("?");
        EdgeBetweennessHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EdgeBetweennessHelpButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(EigenVectorCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(200, 200, 200))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(CentroidCheckBox)
                                        .add(33, 33, 33))
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(BetweennessCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(44, 44, 44))
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(StressCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(79, 79, 79))
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(ClosenessCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(57, 57, 57))
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(RadialityCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(67, 67, 67))
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(DegreeCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(74, 74, 74))
                                    .add(AverageDistanceCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .add(EccentricityCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(50, 50, 50))
                                    .add(EdgeBetweennessCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, EccentricityHelpButton)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, CentroidValueHelpButton)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, BetweennessHelpButton)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, StressHelpButton)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, ClosenessHelpButton)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, RadialityHelpButton)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, DegreeHelpButton)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, EigenVectorHelpButton)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, BirdgingHelpButton)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, EdgeBetweennessHelpButton))
                                    .add(AverageHelpButton)))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(DiameterCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(36, 36, 36)
                                .add(DiameterHelpButton)))
                        .add(31, 31, 31))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(BridgingCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(192, 192, 192))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(selectallButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(unselectallButton)
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(17, 17, 17)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(DiameterHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(DiameterCheckBox))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(AverageHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(AverageDistanceCheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(DegreeHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(DegreeCheckBox))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(RadialityHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(RadialityCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ClosenessHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(ClosenessCheckBox))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(StressHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(StressCheckBox))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(BetweennessHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(BetweennessCheckBox))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(CentroidValueHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(CentroidCheckBox))
                .add(22, 22, 22)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(EccentricityHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(EccentricityCheckBox))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(EigenVectorCheckBox)
                    .add(EigenVectorHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(BridgingCheckBox)
                    .add(BirdgingHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(EdgeBetweennessHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(EdgeBetweennessCheckBox))
                .add(25, 25, 25)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(selectallButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(unselectallButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(27, 27, 27))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        StartButton.setText("Start");
        StartButton.setEnabled(false);
        StartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartButtonActionPerformed(evt);
            }
        });

        StopButton.setText("Stop");
        StopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Click Start to calculate");

        jSeparator1.setForeground(java.awt.Color.gray);

        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(undirectedRadioButton);
        undirectedRadioButton.setSelected(true);
        undirectedRadioButton.setText("for Undirected Networks");
        undirectedRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undirectedRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(directedRaidioButton);
        directedRaidioButton.setText("for Directed Networks");
        directedRaidioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                directedRaidioButtonActionPerformed(evt);
            }
        });

        startclient.setText("Click here to perform calculations on CBMC server");
        startclient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startclientActionPerformed(evt);
            }
        });

        WeightedCheckBox.setText("is Weighted ??");
        WeightedCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        WeightedCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WeightedCheckBoxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(jSeparator1))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(jProgressBar1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(startclient, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(undirectedRadioButton)
                                    .add(directedRaidioButton))
                                .add(0, 0, Short.MAX_VALUE))
                            .add(jLabelServerResponse, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .add(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(WeightedCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(StartButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(StopButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(ExitButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 121, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jProgressBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(undirectedRadioButton)
                .add(18, 18, 18)
                .add(directedRaidioButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 15, Short.MAX_VALUE)
                .add(WeightedCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ExitButton)
                    .add(StopButton)
                    .add(StartButton))
                .add(18, 18, 18)
                .add(startclient)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabelServerResponse, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setToolTipText("");

        LoadAttributesButton.setText("Start with loaded attributes");
        LoadAttributesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadAttributesButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel3.setText("attributes after loading your network ");

        jLabel8.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel8.setText("Click here  if  you  have  loaded   new");

        jLabel9.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel9.setText("This will not start a new computation");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 186, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jPanel3Layout.createSequentialGroup()
                            .addContainerGap()
                            .add(LoadAttributesButton))
                        .add(jPanel3Layout.createSequentialGroup()
                            .add(32, 32, 32)
                            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(jLabel3)
                                .add(jLabel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 181, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(LoadAttributesButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel8)
                .add(5, 5, 5)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel9)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 51));
        jLabel2.setText("CentiScaPe Menu");

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Warning"));

        jLabel4.setText("Centralities are computed for ");

        jLabel5.setText("connected  networks. If  there ");

        jLabel6.setText("are isolated  components, the");

        jLabel7.setText("results will be unreliable.");

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel4Layout.createSequentialGroup()
                                .add(jLabel4)
                                .add(1, 1, 1))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE))
                        .addContainerGap())
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(4, 4, 4))
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jLabel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jLabel4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel5)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel6)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel7)
                .add(30, 30, 30))
        );

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 102, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 22, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 327, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(jLabel2))
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(0, 768, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(36, 36, 36))
        );

        jScrollPane1.setViewportView(jPanel5);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1187, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    private void LoadAttributesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadAttributesButtonActionPerformed
        // TODO add your handling code here:
        int answer = 0;
        if (iscurrentnetworkchanged()) {
            System.out.println("network changed");
            Object[] options = {"Continue", "Abort"};
            answer = JOptionPane.showOptionDialog(this.cyDesktopService.getJFrame(),
                    "You have changed the current network. "
                    + "Please check the loaded attributes "
                    + "belong to the current network. If not "
                    + "please load the new ones.", "CentiScaPe",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                    null, options, options[0]);
        } else {
            System.out.println("network not changed");
        }
        if (answer == 0) {
            currentnetworkview = cyApplicationManager.getCurrentNetworkView();
            currentnetwork = currentnetworkview.getModel();
            CyTable currentnetworktable = currentnetwork.getDefaultNetworkTable();
            changelastworkednetwork(currentnetwork, currentnetworkview);
            VectorResults.clear();
            System.out.println("load from f currentnetworkview = cyApplicationManager.getCurrentNetworkView();iles");
            boolean attributesloaded = false;
            if (isalreadyloaded("CentiScaPe Node Degree")) {
                attributesloaded = true;
                System.out.println("degree already loaded");
                double results[] = calculateglobalparameters("CentiScaPe Node Degree");
                ImplCentrality degreeCentrality = new ImplCentrality("CentiScaPe Node Degree", true,
                        results[0], results[1], results[2]);
                VectorResults.add(degreeCentrality);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe degree mean value", results[0]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe degree Max value", results[2]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe degree min value", results[1]);
                LoadedCentralities[2] = true;
            }
            if (isalreadyloaded("CentiScaPe Eccentricity")) {
                attributesloaded = true;
                System.out.println("eccentricity already loaded");
                double results[] = calculateglobalparameters("CentiScaPe Eccentricity");
                ImplCentrality eccentricityCentrality = new ImplCentrality("CentiScaPe Eccentricity", true, results[0],
                        results[1], results[2]);
                VectorResults.add(eccentricityCentrality);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe Eccentricity mean value", results[0]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe Eccentricity Max value", results[2]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe Eccentricity min value", results[1]);
                LoadedCentralities[3] = true;
            }
            if (isalreadyloaded("CentiScaPe Radiality")) {
                attributesloaded = true;
                System.out.println("radiality already loaded");
                double results[] = calculateglobalparameters("CentiScaPe Radiality");
                ImplCentrality radialityCentrality = new ImplCentrality("CentiScaPe Radiality", true, results[0],
                        results[1], results[2]);
                VectorResults.add(radialityCentrality);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe Radiality mean value", results[0]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe Radiality Max value", results[2]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe Radiality min value", results[1]);
                LoadedCentralities[4] = true;
            }
            if (isalreadyloaded("CentiScaPe Closeness")) {
                attributesloaded = true;
                System.out.println("closeness already loaded");
                double results[] = calculateglobalparameters("CentiScaPe Closeness");
                ImplCentrality closenessCentrality = new ImplCentrality("CentiScaPe Closeness", true, results[0],
                        results[1], results[2]);
                VectorResults.add(closenessCentrality);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe Closeness mean value", results[0]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe Closeness Max value", results[2]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe Closeness min value", results[1]);
                LoadedCentralities[5] = true;
            }
            if (isalreadyloaded("CentiScaPe Stress")) {
                attributesloaded = true;
                System.out.println("Stress already loaded");
                double results[] = calculateglobalparameters("CentiScaPe Stress");
                ImplCentrality stressCentrality = new ImplCentrality("CentiScaPe Stress", true, results[0],
                        results[1], results[2]);
                VectorResults.add(stressCentrality);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe Stress mean value", results[0]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe Stress Max value", results[2]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe Stress min value", results[1]);
                LoadedCentralities[6] = true;
            }
            if (isalreadyloaded("CentiScaPe Betweenness")) {
                attributesloaded = true;
                System.out.println("betweenness already loaded");
                double results[] = calculateglobalparameters("CentiScaPe Betweenness");
                ImplCentrality betweennessCentrality = new ImplCentrality("CentiScaPe Betweenness", true,
                        results[0], results[1], results[2]);
                VectorResults.add(betweennessCentrality);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe Betweenness mean value", results[0]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe Betweenness Max value", results[2]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe Betweenness min value", results[1]);
                LoadedCentralities[7] = true;
            }
            if (isalreadyloaded("CentiScaPe Centroid")) {
                attributesloaded = true;
                System.out.println("centroid already loaded");
                double results[] = calculateglobalparameters("CentiScaPe Centroid");
                ImplCentrality centroidCentrality = new ImplCentrality("CentiScaPe Centroid", true,
                        results[0], results[1], results[2]);
                VectorResults.add(centroidCentrality);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe Centroid mean value", results[0]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe Centroid Max value", results[2]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe Centroid min value", results[1]);
                LoadedCentralities[8] = true;
            }
            if (isalreadyloaded("CentiScaPe EigenVector")) {
                attributesloaded = true;
                System.out.println("EigenVector already loaded");
                double results[] = calculateglobalparameters("CentiScaPe EigenVector");
                ImplCentrality eccentricityCentrality = new ImplCentrality("CentiScaPe EigenVector", true, results[0],
                        results[1], results[2]);
                VectorResults.add(eccentricityCentrality);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe EigenVector mean value", results[0]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe EigenVector Max value", results[2]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe EigenVector min value", results[1]);
                LoadedCentralities[9] = true;
            }
            if (isalreadyloaded("CentiScaPe Bridging")) {
                attributesloaded = true;
                System.out.println("Bridging already loaded");
                double results[] = calculateglobalparameters("CentiScaPe Bridging");
                ImplCentrality eccentricityCentrality = new ImplCentrality("CentiScaPe Bridging", true, results[0],
                        results[1], results[2]);
                VectorResults.add(eccentricityCentrality);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe Bridging mean value", results[0]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe Bridging Max value", results[2]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe Bridging min value", results[1]);
                LoadedCentralities[10] = true;
            }
            if (isalreadyloaded("CentiScaPe Edge Betweenness")) {
                attributesloaded = true;
                System.out.println("Edge Betweenness already loaded");
                double results[] = calculateglobalparametersforedgeattribute("CentiScaPe Edge Betweenness");
                ImplCentrality edgeBetweennessCentrality = new ImplCentrality("CentiScaPe Edge Betweenness", true, results[0],
                        results[1], results[2]);
                VectorResults.add(edgeBetweennessCentrality);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe Edge Betweenness mean value", results[0]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe Edge Betweenness Max value", results[2]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("CentiScaPe Edge Betweenness min value", results[1]);
                LoadedCentralities[11] = true;
            }
            if (loadCentrality("Directed Out Degree", currentnetworktable)) {
                attributesloaded = true;
            }
            if (loadCentrality("Directed In Degree", currentnetworktable)) {
                attributesloaded = true;
            }
            if (loadCentrality("Directed Eccentricity", currentnetworktable)) {
                attributesloaded = true;
            }
            if (loadCentrality("Directed Radiality", currentnetworktable)) {
                attributesloaded = true;
            }
            if (loadCentrality("Directed Closeness", currentnetworktable)) {
                attributesloaded = true;
            }
            if (loadCentrality("Directed Stress", currentnetworktable)) {
                attributesloaded = true;
            }
            if (loadCentrality("Directed Betweenness", currentnetworktable)) {
                attributesloaded = true;
            }
            if (loadCentrality("Directed Centroid", currentnetworktable)) {
                attributesloaded = true;
            }
            if (loadCentrality("Directed EigenVector", currentnetworktable)) {
                attributesloaded = true;
            }
            if (loadCentrality("Directed Bridging", currentnetworktable)) {
                attributesloaded = true;
            }
            if (isalreadyloaded("Directed Edge Betweenness")) {
                attributesloaded = true;
                System.out.println("Directed Edge Betweenness already loaded");
                double results[] = calculateglobalparametersforedgeattribute("Directed Edge Betweenness");
                ImplCentrality dirEdgeBetweennessCentrality = new ImplCentrality("Directed Edge Betweenness", true, results[0],
                        results[1], results[2]);
                VectorResults.add(dirEdgeBetweennessCentrality);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Directed Edge Betweenness mean value", results[0]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Directed Edge Betweenness Max value", results[2]);
                currentnetworktable.getRow(currentnetwork.getSUID()).set("Directed Edge Betweenness min value", results[1]);
                LoadedCentralities[11] = true;
            }
            if (attributesloaded) {
                changelastworkednetwork(currentnetwork, currentnetworkview);
                centiscapecore.createCentiScaPeVisualizer();
                centiscapecore.getvisualizer().setEnabled(VectorResults);
                System.out.println("open results");
            } else {
                System.out.println("no attributes loaded");
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(), "No CentiScaPe attributes loaded",
                        "CentiScaPe", JOptionPane.INFORMATION_MESSAGE);
            }
    }//GEN-LAST:event_LoadAttributesButtonActionPerformed

    }

    public boolean loadCentrality(String centrality, CyTable currentnetworktable) {
        boolean result = false;
        if (isalreadyloaded(centrality)) {
            result = true;
            System.out.println(centrality + " already loaded");
            double results[] = calculateglobalparameters(centrality);
            ImplCentrality eccentricityCentrality = new ImplCentrality(centrality, true, results[0],
                    results[1], results[2]);
            VectorResults.add(eccentricityCentrality);
            currentnetworktable.getRow(currentnetwork.getSUID()).set(centrality + " mean value", results[0]);
            currentnetworktable.getRow(currentnetwork.getSUID()).set(centrality + " Max value", results[2]);
            currentnetworktable.getRow(currentnetwork.getSUID()).set(centrality + " min value", results[1]);
        }
        return result;
    }

    private double[] calculateglobalparameters(String centrality) {
        double results[] = new double[3];
        double min = Double.MAX_VALUE, max = -Double.MAX_VALUE, totalsum = 0;
        double totalnodecount = currentnetwork.getNodeCount();
        CyTable currenttable = currentnetwork.getDefaultNodeTable();
        for (Iterator i = currentnetwork.getNodeList().listIterator(); i.hasNext();) {
            CyNode currentnode = (CyNode) i.next();
            double currentcentrality = currenttable.getRow(currentnode.getSUID()).get(centrality, Double.class);
            if (currentcentrality < min) {
                min = currentcentrality;
            }
            if (currentcentrality > max) {
                max = currentcentrality;
            }
            totalsum = totalsum + currentcentrality;
        }
        double mean = totalsum / totalnodecount;
        results[0] = mean;
        results[1] = min;
        results[2] = max;
        return results;
    }

    private double[] calculateglobalparametersforedgeattribute(String centrality) {
        double results[] = new double[3];
        double min = Double.MAX_VALUE, max = -Double.MAX_VALUE, totalsum = 0;
        double totalEdgeCount = currentnetwork.getEdgeCount();
        CyTable currenttable = currentnetwork.getDefaultEdgeTable();
        for (Iterator i = currentnetwork.getEdgeList().listIterator(); i.hasNext();) {
            CyEdge currentEdge = (CyEdge) i.next();
            double currentcentrality = currenttable.getRow(currentEdge.getSUID()).get(centrality, Double.class);
            if (currentcentrality < min) {
                min = currentcentrality;
            }
            if (currentcentrality > max) {
                max = currentcentrality;
            }
            totalsum = totalsum + currentcentrality;
        }
        double mean = totalsum / totalEdgeCount;
        results[0] = mean;
        results[1] = min;
        results[2] = max;
        return results;
    }
    private void CentroidValueHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CentroidValueHelpButtonActionPerformed
        // TODO add your handling code here:
        CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(8);
        help.setVisible(true);
    }//GEN-LAST:event_CentroidValueHelpButtonActionPerformed

    private void BetweennessHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BetweennessHelpButtonActionPerformed
        CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(7);
        help.setVisible(true);
    }//GEN-LAST:event_BetweennessHelpButtonActionPerformed

    private void StressHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StressHelpButtonActionPerformed
        // TODO add your handling code here:
        CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(6);
        help.setVisible(true);
    }//GEN-LAST:event_StressHelpButtonActionPerformed

    private void RadialityHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadialityHelpButtonActionPerformed
        // TODO add your handling code here:
        CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(4);
        help.setVisible(true);
    }//GEN-LAST:event_RadialityHelpButtonActionPerformed

    private void DegreeHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DegreeHelpButtonActionPerformed
        // TODO add your handling code here:
        CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(2);
        help.setVisible(true);
    }//GEN-LAST:event_DegreeHelpButtonActionPerformed

    private void DiameterHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiameterHelpButtonActionPerformed
        // TODO add your handling code here:
        CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(0);
        help.setVisible(true);
    }//GEN-LAST:event_DiameterHelpButtonActionPerformed

    private void EccentricityHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EccentricityHelpButtonActionPerformed
        // TODO add your handling code here:
        CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(3);
        help.setVisible(true);
    }//GEN-LAST:event_EccentricityHelpButtonActionPerformed

    private void AverageHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AverageHelpButtonActionPerformed
        // TODO add your handling code here:
        CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(1);
        help.setVisible(true);
    }//GEN-LAST:event_AverageHelpButtonActionPerformed

    private void ClosenessHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClosenessHelpButtonActionPerformed
        // TODO add your handling code here:
        CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(5);
        help.setVisible(true);
    }//GEN-LAST:event_ClosenessHelpButtonActionPerformed

    private void unselectallButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unselectallButtonActionPerformed
        // TODO add your handling code here:
        DiameterCheckBox.setSelected(false);
        AverageDistanceCheckBox.setSelected(false);
        DegreeCheckBox.setSelected(false);
        EccentricityCheckBox.setSelected(false);
        RadialityCheckBox.setSelected(false);
        ClosenessCheckBox.setSelected(false);
        StressCheckBox.setSelected(false);
        BetweennessCheckBox.setSelected(false);
        CentroidCheckBox.setSelected(false);
        EigenVectorCheckBox.setSelected(false);
        BridgingCheckBox.setSelected(false);
        EdgeBetweennessCheckBox.setSelected(false);
        verifyselection();
    }//GEN-LAST:event_unselectallButtonActionPerformed

    private void selectallButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectallButtonActionPerformed
        // TODO add your handling code here:
        verifyselection();
    }//GEN-LAST:event_selectallButtonActionPerformed

    private void selectallButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectallButtonMouseClicked
        // TODO add your handling code here:
        DiameterCheckBox.setSelected(true);
        AverageDistanceCheckBox.setSelected(true);
        DegreeCheckBox.setSelected(true);
        EccentricityCheckBox.setSelected(true);
        RadialityCheckBox.setSelected(true);
        ClosenessCheckBox.setSelected(true);
        StressCheckBox.setSelected(true);
        BetweennessCheckBox.setSelected(true);
        CentroidCheckBox.setSelected(true);
        EigenVectorCheckBox.setSelected(true);
        BridgingCheckBox.setSelected(true);
        EdgeBetweennessCheckBox.setSelected(true);
        verifyselection();
    }//GEN-LAST:event_selectallButtonMouseClicked

    private void CentroidCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CentroidCheckBoxActionPerformed
        // TODO add your handling code here:
        verifyselection();
    }//GEN-LAST:event_CentroidCheckBoxActionPerformed

    private void BetweennessCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BetweennessCheckBoxActionPerformed
        // TODO add your handling code here:
        verifyselection();
    }//GEN-LAST:event_BetweennessCheckBoxActionPerformed

    private void StressCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StressCheckBoxActionPerformed
        verifyselection();
    }//GEN-LAST:event_StressCheckBoxActionPerformed

    private void ClosenessCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClosenessCheckBoxActionPerformed
        // TODO add your handling code here:
        verifyselection();
    }//GEN-LAST:event_ClosenessCheckBoxActionPerformed

    private void RadialityCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadialityCheckBoxActionPerformed
        // TODO add your handling code here:
        verifyselection();
    }//GEN-LAST:event_RadialityCheckBoxActionPerformed

    private void EccentricityCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EccentricityCheckBoxActionPerformed
        // TODO add your handling code here:
        verifyselection();
    }//GEN-LAST:event_EccentricityCheckBoxActionPerformed

    private void DegreeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DegreeCheckBoxActionPerformed
        verifyselection();
    }//GEN-LAST:event_DegreeCheckBoxActionPerformed

    private void AverageDistanceCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AverageDistanceCheckBoxActionPerformed
        verifyselection();
    }//GEN-LAST:event_AverageDistanceCheckBoxActionPerformed

    private void DiameterCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiameterCheckBoxActionPerformed
        verifyselection();
    }//GEN-LAST:event_DiameterCheckBoxActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed

        Object[] options = {"YES", "NO"};
        int answer = JOptionPane.showOptionDialog(null, "Are you sure you want to exit?", "CentiScaPe",
                JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE,
                null, options, options[0]);
        if (answer == 0) {
            if (calculating) {
                if (ThrEng.isAlive()) {
                    ThrEng.endprogram();
                }
            }
            centiscapecore.closeCentiscapevisualizer();
            centiscapecore.closecore();
            centiscapecore.closeCentiscapeStartMenu();
        }
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void StopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopButtonActionPerformed
        // TODO add your handling code here:
        if (directedRaidioButton.isSelected()) {
            if (calculating) {
                if (Thrd.isAlive()) {
                    CentiScaPeDirectedAlgorithm.stopAlgo();
                }
            }
            stopcalculus();
        } else {
            if (calculating) {
                if (ThrEng.isAlive()) {
                    ThrEng.endprogram();
                }
                stopcalculus();
            }
        }
        verifyselection();
    }//GEN-LAST:event_StopButtonActionPerformed

    private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtonActionPerformed
        System.out.println("entro in start");
        currentnetworkview = cyApplicationManager.getCurrentNetworkView();
        if (currentnetworkview == null) {
            System.out.println("No network1");
            JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),
                    "No network selected!", "CentiScaPe", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            currentnetworkview = cyApplicationManager.getCurrentNetworkView();
        }
        currentnetwork = currentnetworkview.getModel();
        if (currentnetwork.getNodeCount() == 0) {
            System.out.println("No network1");
            JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),
                    "No network exists!", "CentiScaPe", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int answer = 0;
        if (iscurrentnetworkchanged()) {
            System.out.println("network changed");
            Object[] options = {"Start computation", "Abort computation"};
            answer = JOptionPane.showOptionDialog(this.cyDesktopService.getJFrame(), "You have changed the current network. "
                    + "Starting a new computation you will\n"
                    + "loose all the previous network attributes. "
                    + "Save them before proceeding.", "CentiScaPe",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                    null, options, options[0]);
        } else {
            System.out.println("network not changed");
        }
        if (answer == 0) {
            changelastworkednetwork(cyApplicationManager.getCurrentNetwork(), cyApplicationManager.getCurrentNetworkView());
            this.setEnabled(false);
            //verify if it is weighted 
            isWeighted = WeightedCheckBox.isSelected();
            //enter the edge attribute to be selected - edge attribute name wich gives weights of edges
            if (isWeighted) {
                // take attribute from user
                edgeWeightAttribute = JOptionPane.showInputDialog(null, "Enter the Edge Attribute to be used as edge weight for the network");
                try {
                    while (currentnetwork.getDefaultEdgeTable().getColumn(edgeWeightAttribute) == null) {
                        //pop a menu showing that it is not in the list and 
                        edgeWeightAttribute = JOptionPane.showInputDialog(null, "Oops! there is no such attribute found in the edge table. Looks like you have misspelled attribute name.\n" + "Enter the Edge Attribute to be used as edge weight for the network");
                    }
                } catch (Exception ex) {
                    System.out.println("user has pressed cancel button. Aborting!");
                    return;
                }
                if (currentnetwork.getDefaultEdgeTable().getColumn(edgeWeightAttribute).getType() == Double.class) {
                    System.out.println("double edge weight");
                    attrtype = Double.class;
                } else if (currentnetwork.getDefaultEdgeTable().getColumn(edgeWeightAttribute).getType() == Integer.class) {
                    System.out.println("integer edge weight");
                    attrtype = Integer.class;
                } else if (currentnetwork.getDefaultEdgeTable().getColumn(edgeWeightAttribute).getType() == Long.class) {
                    System.out.println("Long edge weight");
                    attrtype = Long.class;
                } else {
                    JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(), edgeWeightAttribute
                            + " is neither an integer nor a double attribute! please specify the correct edge attribute",
                            "CentiScaPe", JOptionPane.ERROR_MESSAGE);
                    System.out.println("ERROR!!");
                    return;
                }
            }
            inizio = System.currentTimeMillis();
            System.out.println("start time =" + inizio);
            // verify Checkbox
            CheckedCentralities[0] = DiameterCheckBox.isSelected();
            CheckedCentralities[1] = AverageDistanceCheckBox.isSelected();
            CheckedCentralities[2] = DegreeCheckBox.isSelected();
            CheckedCentralities[3] = EccentricityCheckBox.isSelected();
            CheckedCentralities[4] = RadialityCheckBox.isSelected();
            CheckedCentralities[5] = ClosenessCheckBox.isSelected();
            CheckedCentralities[6] = StressCheckBox.isSelected();
            CheckedCentralities[7] = BetweennessCheckBox.isSelected();
            CheckedCentralities[8] = CentroidCheckBox.isSelected();
            CheckedCentralities[9] = EigenVectorCheckBox.isSelected();
            CheckedCentralities[10] = BridgingCheckBox.isSelected();
            CheckedCentralities[11] = EdgeBetweennessCheckBox.isSelected();
            if (undirectedRadioButton.isSelected()) {
                System.out.println("Enter in undirected networks\n");
                int secondanswer = 0;
                String listofloaded = verifyloadedattributes(CheckedCentralities);
                if (listofloaded != null) {
                    Object[] options = {"Start computation", "Abort computation"};
                    secondanswer =
                            JOptionPane.showOptionDialog(
                            this.cyDesktopService.getJFrame(),
                            listofloaded + "already loaded.\n "
                            + "A new computation may need a long time.\n"
                            + "Unselect the centralities you do not need\n"
                            + "to recalculate before starting a new computation.", "CentiScaPe",
                            JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                            null, options, options[0]);
                    System.out.println("quelle gia' presenti sono " + listofloaded);
                } else {
                    System.out.println("e' nullo");
                }
                CentiScaPealg.setChecked(CheckedCentralities);
                if (secondanswer == 0) {
                    removeattributes();
                    calculatingresult();
                    ThrEng = new CentiScaPeThreadEngine(CentiScaPealg, currentnetwork, currentnetworkview);
                    ThrEng.setCaller(this);
                    ThrEng.start();
                    this.setEnabled(true);
                }
            } else {
                System.out.println("enter in directed networks\n");
                if (checkIfAlreadyPresentAndDelete()) {
                    Thrd = new CentiScaPeDirectedThreadEngine(currentnetwork, CheckedCentralities, directedCentralities, this, centiscapecore);
                    Thrd.start();
                }
            }
        }
    }//GEN-LAST:event_StartButtonActionPerformed
    public boolean checkIfAlreadyPresentAndDelete() {
        boolean enterIntoAlgo = true;
        boolean[] checkedButAlreadyLoadedDirectedCentralities = new boolean[numberofcentralities + 1];
        StringBuffer toDisplay = new StringBuffer();
        int checkedButAlreadyLoadedDirectedCentralitiesNum = 0;
        CyTable currentnodetable = currentnetwork.getDefaultNodeTable();
        CyTable currentnetworktable = currentnetwork.getDefaultNetworkTable();
        CyTable currentedgetable = currentnetwork.getDefaultEdgeTable();
        directedCentralities = new String[numberofcentralities];
        directedCentralities[0] = "Directed Diameter";
        directedCentralities[1] = "Directed Average Distance";
        directedCentralities[2] = "Directed Out Degree";
        directedCentralities[3] = "Directed Eccentricity";
        directedCentralities[4] = "Directed Radiality";
        directedCentralities[5] = "Directed Closeness";
        directedCentralities[6] = "Directed Stress";
        directedCentralities[7] = "Directed Betweenness";
        directedCentralities[8] = "Directed Centroid";
        directedCentralities[9] = "Directed EigenVector";
        directedCentralities[10] = "Directed Bridging";
        directedCentralities[11] = "Directed Edge Betweenness";
        for (int roll = 0; roll < numberofcentralities; roll++) {
            if (CheckedCentralities[roll] == true) {
                if (currentnetworktable.getColumn(directedCentralities[roll]) != null || isalreadyloaded(directedCentralities[roll])) {
                    checkedButAlreadyLoadedDirectedCentralitiesNum++;
                    checkedButAlreadyLoadedDirectedCentralities[roll] = true;
                    toDisplay.append(directedCentralities[roll], 9, directedCentralities[roll].length());
                    toDisplay.append(", ");
                } else {
                    checkedButAlreadyLoadedDirectedCentralities[roll] = false;
                }
            }
        }
        if (CheckedCentralities[2] == true) {
            if (currentnetworktable.getColumn("Directed In Degree") != null || isalreadyloaded("Directed In Degree")) {
                checkedButAlreadyLoadedDirectedCentralitiesNum++;
                checkedButAlreadyLoadedDirectedCentralities[numberofcentralities] = true;
                toDisplay.append("Directed In Degree", 9, "Directed In Degree".length());
                toDisplay.append(", ");
            } else {
                checkedButAlreadyLoadedDirectedCentralities[numberofcentralities] = false;
            }
        }
        if (checkedButAlreadyLoadedDirectedCentralitiesNum == 0) {
            toDisplay = null;
        } else if (checkedButAlreadyLoadedDirectedCentralitiesNum == 1) {
            // append is
            toDisplay.deleteCharAt(toDisplay.lastIndexOf(","));
            toDisplay.append("is ");
        } else {
            //insert and and append are
            toDisplay.deleteCharAt(toDisplay.lastIndexOf(","));
            toDisplay.append("are ");
            toDisplay.insert(toDisplay.lastIndexOf(","), " and");
            toDisplay.deleteCharAt(toDisplay.lastIndexOf(","));
        }
        int useranswer = 0;
        if (toDisplay != null) {
            Object[] options = {"Start computation", "Abort computation"};
            useranswer =
                    JOptionPane.showOptionDialog(
                    this.cyDesktopService.getJFrame(),
                    toDisplay + "already loaded.\n "
                    + "A new computation may need a long time.\n"
                    + "Unselect the centralities you do not need\n"
                    + "to recalculate before starting a new computation.", "CentiScaPe",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                    null, options, options[0]);
        }
        if (useranswer == 0) {
            //delete all previous loaded centralities
            calculatingresult();
            for (int roll = 0; roll < 2; roll++) {
                if (CheckedCentralities[roll] || checkedButAlreadyLoadedDirectedCentralities[roll]) {
                    if (currentnetworktable.getColumn(directedCentralities[roll]) != null) {
                        currentnetworktable.deleteColumn(directedCentralities[roll]);
                    }
                }
            }
            for (int roll = 2; roll < numberofcentralities; roll++) {
                if (roll != 11) {
                    if (CheckedCentralities[roll] || checkedButAlreadyLoadedDirectedCentralities[roll]) {
                        currentnodetable.deleteColumn(directedCentralities[roll]);
                        currentnetworktable.deleteColumn(directedCentralities[roll] + " Max value");
                        currentnetworktable.deleteColumn(directedCentralities[roll] + " min value");
                        currentnetworktable.deleteColumn(directedCentralities[roll] + " mean value");
                    }
                } else {
                    if (CheckedCentralities[roll] || checkedButAlreadyLoadedDirectedCentralities[roll]) {
                        currentedgetable.deleteColumn(directedCentralities[roll]);
                        currentnetworktable.deleteColumn(directedCentralities[roll] + " Max value");
                        currentnetworktable.deleteColumn(directedCentralities[roll] + " min value");
                        currentnetworktable.deleteColumn(directedCentralities[roll] + " mean value");
                    }
                }
            }
            if (CheckedCentralities[2] || checkedButAlreadyLoadedDirectedCentralities[numberofcentralities]) {
                currentnodetable.deleteColumn("Directed In Degree");
                currentnetworktable.deleteColumn("Directed In Degree" + " Max value");
                currentnetworktable.deleteColumn("Directed In Degree" + " min value");
                currentnetworktable.deleteColumn("Directed In Degree" + " mean value");
            }
        } else {
            System.out.println("Aborted by user");
            enterIntoAlgo = false;
        }
        return enterIntoAlgo;
        //deleted all the previous centralities
        //now execute directed centralities depending upon users answer
    }
    private void EigenVectorCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EigenVectorCheckBoxActionPerformed
        // TODO add your handling code here:
        verifyselection();
    }//GEN-LAST:event_EigenVectorCheckBoxActionPerformed

    private void EigenVectorHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EigenVectorHelpButtonActionPerformed
        // TODO add your handling code here:
        CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(9);
        help.setVisible(true);
    }//GEN-LAST:event_EigenVectorHelpButtonActionPerformed

    private void undirectedRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undirectedRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_undirectedRadioButtonActionPerformed

    private void directedRaidioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_directedRaidioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_directedRaidioButtonActionPerformed

    private void BridgingCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BridgingCheckBoxActionPerformed
        // TODO add your handling code here:
        verifyselection();
    }//GEN-LAST:event_BridgingCheckBoxActionPerformed

    private void BirdgingHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BirdgingHelpButtonActionPerformed
        // TODO add your handling code here:
        CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(10);
        help.setVisible(true);
    }//GEN-LAST:event_BirdgingHelpButtonActionPerformed

    public long lngUseCentiscapeWS(long lngCent, String strNetworkName) {
        long rc = -1;
        long lngID;     // ID richiesta andata a buon fine
        try {
            String strUser = JOptionPane.showInputDialog(this.cyDesktopService.getJFrame(),
                    "Please insert your mail for the answer");
            if (strUser.isEmpty() || !strUser.contains("@")) {
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),
                        "Please insert a valid @mail", "CentiScaPe",
                        JOptionPane.INFORMATION_MESSAGE);
                return -2;
            }
            jLabel1.setText("Connecting to CentiScaPe web service");
            pckcentiscapews.CentiscapeWS_Service service =
                    new pckcentiscapews.CentiscapeWS_Service();
            pckcentiscapews.CentiscapeWS port = service.getCentiscapeWSPort();
            // passa la richiesta al web service:
            // verifica l'utente e rende il numero ID di richiesta
            jLabel1.setText("Preparing data");
            byte[] pUser = new byte[strUser.length() + 1];
            int i;
            for (i = 0; i < strUser.length(); i++) {
                pUser[i] = (byte) strUser.charAt(i);
            }
            pUser[i] = 0;
            jLabel1.setText("Getting request number");
            lngID = port.request(pUser, lngCent);
            if (lngID >= 0) {
                // esporta la rete nel formato .sif
                jLabel1.setText("Getting network data...");
                StringWriter f = new StringWriter();
                CyNetwork netToSave = cyApplicationManager.getCurrentNetworkView().getModel();
                //InteractionWriter.writeInteractions(netToSave, f, null);
                // trova la lunghezza del buffer da trasferire
                int intFileLength = (int) f.getBuffer().length();
                // nome della rete
                String strRete = String.format("%s_(%d)", strNetworkName, lngID);
                byte[] pNetworkName = new byte[strRete.length() + 1];
                for (i = 0; i < strRete.length(); i++) {
                    pNetworkName[i] = (byte) strRete.charAt(i);
                }
                pNetworkName[i] = 0;
                // alloca buffer per contenere il file .sif
                byte[] pBuffer = new byte[intFileLength];
                // stringa col contenuto
                String strFileSif = f.toString();
                // carica il buffer
                jLabel1.setText("Loading network data...");
                for (i = 0; i < intFileLength; i++) {
                    pBuffer[i] = (byte) strFileSif.charAt(i);
                }
                // trasmette ID, mail, nome rete e dati
                jLabel1.setText("Sending network data, please wait...");
                rc = port.loadNetwork(lngID, pUser, pNetworkName, pBuffer, intFileLength);
                if (rc == 0) {
                    jLabel1.setText("Network successfully transferred");
                    System.out.println("Network transferred");
                } else {
                    JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),
                            "Can't load network in webservice", "CentiScaPe",
                            JOptionPane.ERROR_MESSAGE);
                    jLabel1.setText("Can't load network in web service");
                    System.out.println("Can't load network in webservice");
                }
            } else {
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),
                        "Can't get request number from webservice", "CentiScaPe",
                        JOptionPane.ERROR_MESSAGE);
                System.out.println("Can't get request number from webservice");
            }
        } catch (Exception e) {
            String strE = e.getMessage();
            if (strE == null) {
                return -2;
            }
            jLabel1.setText("Exception in using plugin");
            if (!strE.isEmpty()) {
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),
                        strE, "CentiScaPe",
                        JOptionPane.ERROR_MESSAGE);
                System.out.println(strE);
            } else {
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),
                        "Exception in lngUseCentiscapeWS function", "CentiScaPe",
                        JOptionPane.ERROR_MESSAGE);
            }
            return rc;
        }
        if (rc == 0) {
            return lngID;   //codice richiesta
        } else {
            return -1;
        }
    }
    private void startclientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startclientActionPerformed
        // TODO add your handling code here:      
        System.out.println("hello Carlo!");
        CyNetwork network;
        CyNetworkView view;
        view = cyApplicationManager.getCurrentNetworkView();
        network = cyApplicationManager.getCurrentNetwork();
        if (network.getNodeCount() == 0) {
            System.out.println("No network");
            JOptionPane.showMessageDialog(null, "No network selected!", "CentiScaPe", JOptionPane.WARNING_MESSAGE);
            return;
        }
        long lngCent = 0;
        if (AverageDistanceCheckBox.isSelected()) {
            lngCent += 1;
        }
        if (DegreeCheckBox.isSelected()) {
            lngCent += 2;
        }
        if (RadialityCheckBox.isSelected()) {
            lngCent += 4;
        }
        if (ClosenessCheckBox.isSelected()) {
            lngCent += 8;
        }
        if (EccentricityCheckBox.isSelected()) {
            lngCent += 16;
        }
        if (StressCheckBox.isSelected()) {
            lngCent += 32;
        }
        if (BetweennessCheckBox.isSelected()) {
            lngCent += 64;
        }
        if (CentroidCheckBox.isSelected()) {
            lngCent += 128;
        }
        if (lngCent == 0) {
            JOptionPane.showMessageDialog(null, "Please select centralities to evaluate");
        } else {
            String strNomeRete = "" + network.getSUID(); //  nwtwork.getTitle();
            String strRete = strNomeRete.replaceAll(" ", "_");
            CentiScaPeClient centiscapeclient = new CentiScaPeClient(network);
            try {
                long lngID = centiscapeclient.lngUseCentiscapeWS(lngCent, strRete, network, this);
                if (lngID >= 0) {
                    String strFileName = String.format("%s_(%d).xgmml", strRete, lngID);
                    JOptionPane.showMessageDialog(null, "Results (in file: " + strFileName + ") will be sent to your mail as soon as they are ready", "CentiScaPe", JOptionPane.INFORMATION_MESSAGE);
                } else if (lngID == -1) {
                    JOptionPane.showMessageDialog(null, "Call server failed", "CentiScaPe", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (IOException e) {
                System.err.println("Couldn't get I/O for the connection to:");
            }
        }

    }//GEN-LAST:event_startclientActionPerformed

    private void EdgeBetweennessCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EdgeBetweennessCheckBoxActionPerformed
        // TODO add your handling code here:
        verifyselection();
    }//GEN-LAST:event_EdgeBetweennessCheckBoxActionPerformed

    private void EdgeBetweennessHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EdgeBetweennessHelpButtonActionPerformed
        // TODO add your handling code here:
        CentiScaPeHelp help = new CentiScaPeHelp();
        help.setText(11);
        help.setVisible(true);
    }//GEN-LAST:event_EdgeBetweennessHelpButtonActionPerformed

    private void WeightedCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WeightedCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_WeightedCheckBoxActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox AverageDistanceCheckBox;
    private javax.swing.JButton AverageHelpButton;
    private javax.swing.JCheckBox BetweennessCheckBox;
    private javax.swing.JButton BetweennessHelpButton;
    private javax.swing.JButton BirdgingHelpButton;
    private javax.swing.JCheckBox BridgingCheckBox;
    private javax.swing.JCheckBox CentroidCheckBox;
    private javax.swing.JButton CentroidValueHelpButton;
    private javax.swing.JCheckBox ClosenessCheckBox;
    private javax.swing.JButton ClosenessHelpButton;
    private javax.swing.JCheckBox DegreeCheckBox;
    private javax.swing.JButton DegreeHelpButton;
    private javax.swing.JCheckBox DiameterCheckBox;
    private javax.swing.JButton DiameterHelpButton;
    private javax.swing.JCheckBox EccentricityCheckBox;
    private javax.swing.JButton EccentricityHelpButton;
    private javax.swing.JCheckBox EdgeBetweennessCheckBox;
    private javax.swing.JButton EdgeBetweennessHelpButton;
    private javax.swing.JCheckBox EigenVectorCheckBox;
    private javax.swing.JButton EigenVectorHelpButton;
    private javax.swing.JButton ExitButton;
    private javax.swing.JButton LoadAttributesButton;
    private javax.swing.JCheckBox RadialityCheckBox;
    private javax.swing.JButton RadialityHelpButton;
    private javax.swing.JButton StartButton;
    private javax.swing.JButton StopButton;
    private javax.swing.JCheckBox StressCheckBox;
    private javax.swing.JButton StressHelpButton;
    private javax.swing.JCheckBox WeightedCheckBox;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton directedRaidioButton;
    private static javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private static javax.swing.JLabel jLabelServerResponse;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton selectallButton;
    private javax.swing.JButton startclient;
    private javax.swing.JRadioButton undirectedRadioButton;
    private javax.swing.JButton unselectallButton;
    // End of variables declaration//GEN-END:variables

    public void endcalculus(int totalnodecount) {
        this.jProgressBar1.setIndeterminate(false);
        jLabel1.setText("Finished: " + totalnodecount + " nodes worked");
        StartButton.setEnabled(true);
        calculating = false;
        StartButton.setEnabled(true);
        fine = System.currentTimeMillis();
        System.out.println("end time =" + fine + ", execution time (millis) = " + (fine - inizio));
    }

    public void stopcalculus() {
        this.jProgressBar1.setIndeterminate(false);
        jLabel1.setText("Interrupted by user, click start to repeat");
        calculating = false;
        StartButton.setEnabled(true);
    }

    public void calculatingresult() {
        calculating = true;
        jProgressBar1.setIndeterminate(true);
        jProgressBar1.setVisible(true);
        jLabel1.setText("Calculating...");
        StartButton.setEnabled(false);
    }

    public static void updatenodecounting(int nodeworked, int totalnodecount) {
        jLabel1.setText("Working: node " + nodeworked + " of " + totalnodecount);
    }

    public void removeattributes() {
        CyTable nodeTable = currentnetwork.getDefaultNodeTable();
        CyTable networkTable = currentnetwork.getDefaultNetworkTable();
        CyTable edgeTable = currentnetwork.getDefaultEdgeTable();
        if (CheckedCentralities[0] || LoadedCentralities[0]) {
            if (networkTable.getColumn("CentiScaPe Diameter") != null) {
                networkTable.deleteColumn("CentiScaPe Diameter");
            }
        }
        if (CheckedCentralities[1] || LoadedCentralities[1]) {
            if (networkTable.getColumn("CentiScaPe Average Distance") != null) {
                networkTable.deleteColumn("CentiScaPe Average Distance");
            }
        }
        if (CheckedCentralities[2] || LoadedCentralities[2]) {
            nodeTable.deleteColumn("CentiScaPe Node Degree");
            networkTable.deleteColumn("CentiScaPe degree Max value");
            networkTable.deleteColumn("CentiScaPe degree min value");
            networkTable.deleteColumn("CentiScaPe degree mean value");
        }
        if (CheckedCentralities[3] || LoadedCentralities[3]) {
            nodeTable.deleteColumn("CentiScaPe Eccentricity");
            networkTable.deleteColumn("CentiScaPe Eccentricity Max value");
            networkTable.deleteColumn("CentiScaPe Eccentricity min value");
            networkTable.deleteColumn("CentiScaPe Eccentricity mean value");
        }
        if (CheckedCentralities[4] || LoadedCentralities[4]) {
            nodeTable.deleteColumn("CentiScaPe Radiality");
            networkTable.deleteColumn("CentiScaPe Radiality Max value");
            networkTable.deleteColumn("CentiScaPe Radiality min value");
            networkTable.deleteColumn("CentiScaPe Radiality mean value");
        }
        if (CheckedCentralities[5] || LoadedCentralities[5]) {
            nodeTable.deleteColumn("CentiScaPe Closeness");
            networkTable.deleteColumn("CentiScaPe Closeness Max value");
            networkTable.deleteColumn("CentiScaPe Closeness min value");
            networkTable.deleteColumn("CentiScaPe Closeness mean value");
        }
        if (CheckedCentralities[6] || LoadedCentralities[6]) {
            nodeTable.deleteColumn("CentiScaPe Stress");
            networkTable.deleteColumn("CentiScaPe Stress Max value");
            networkTable.deleteColumn("CentiScaPe Stress min value");
            networkTable.deleteColumn("CentiScaPe Stress mean value");
        }
        if (CheckedCentralities[7] || LoadedCentralities[7]) {
            nodeTable.deleteColumn("CentiScaPe Betweenness");
            networkTable.deleteColumn("CentiScaPe Betweenness Max value");
            networkTable.deleteColumn("CentiScaPe Betweenness min value");
            networkTable.deleteColumn("CentiScaPe Betweenness mean value");
        }
        if (CheckedCentralities[8] || LoadedCentralities[8]) {
            nodeTable.deleteColumn("CentiScaPe Centroid");
            networkTable.deleteColumn("CentiScaPe Centroid Max value");
            networkTable.deleteColumn("CentiScaPe Centroid min value");
            networkTable.deleteColumn("CentiScaPe Centroid mean value");
        }
        if (CheckedCentralities[9] || LoadedCentralities[9]) {
            if (nodeTable.getColumn("CentiScaPe EigenVector") != null) {
                nodeTable.deleteColumn("CentiScaPe EigenVector");
                networkTable.deleteColumn("CentiScaPe EigenVector Max value");
                networkTable.deleteColumn("CentiScaPe EigenVector min value");
                networkTable.deleteColumn("CentiScaPe EigenVector mean value");
            }
        }
        if (CheckedCentralities[10] || LoadedCentralities[10]) {
            if (nodeTable.getColumn("CentiScaPe Bridging") != null) {
                nodeTable.deleteColumn("CentiScaPe Bridging");
                networkTable.deleteColumn("CentiScaPe Bridging Max value");
                networkTable.deleteColumn("CentiScaPe Bridging min value");
                networkTable.deleteColumn("CentiScaPe Bridging mean value");
            }
        }
        if (CheckedCentralities[11] || LoadedCentralities[11]) {
            if (edgeTable.getColumn("CentiScaPe Edge Betweenness") != null) {
                edgeTable.deleteColumn("CentiScaPe Edge Betweenness");
                networkTable.deleteColumn("CentiScaPe Edge Betweenness Max value");
                networkTable.deleteColumn("CentiScaPe Edge Betweenness min value");
                networkTable.deleteColumn("CentiScaPe Edge Betweenness mean value");
            }
        }
        for (int i = 0; i < numberofcentralities; i++) {
            LoadedCentralities[i] = false;
        }
    }

    public void changelastworkednetwork(CyNetwork newnetwork, CyNetworkView newview) {
        lastworkednetwork = newnetwork;
        lastworkedview = newview;
    }

    public boolean iscurrentnetworkchanged() {
        if (lastworkedview == null) {
            return false;
        } else if (lastworkedview.getNodeViews().size() == 0) {
            return false;
        } else {
            return !(lastworkedview.getSUID() == cyApplicationManager.getCurrentNetworkView().getSUID());
        }
    }

    public String verifyloadedattributes(boolean[] selectedCentralities) {
        boolean[] loadedCentralities = new boolean[numberofcentralities];
        int loadedcentralities = 0;
        String stringcentralities = "";
        CyTable currentnodetable = currentnetwork.getDefaultNodeTable();
        CyTable currentnetworktable = currentnetwork.getDefaultNetworkTable();
        if (currentnetworktable.getColumn("CentiScaPe Diameter") != null) {
            loadedCentralities[0] = true;
        } else {
            loadedCentralities[0] = false;
        }
        if (currentnetworktable.getColumn("CentiScaPe Average Distance") != null) {
            loadedCentralities[1] = true;
        } else {
            loadedCentralities[1] = false;
        }
        loadedCentralities[2] = isalreadyloaded("CentiScaPe Node Degree");
        loadedCentralities[3] = isalreadyloaded("CentiScaPe Eccentricity");
        loadedCentralities[4] = isalreadyloaded("CentiScaPe Radiality");
        loadedCentralities[5] = isalreadyloaded("CentiScaPe Closeness");
        loadedCentralities[6] = isalreadyloaded("CentiScaPe Stress");
        loadedCentralities[7] = isalreadyloaded("CentiScaPe Betweenness");
        loadedCentralities[8] = isalreadyloaded("CentiScaPe Centroid");
        loadedCentralities[9] = isalreadyloaded("CentiScaPe EigenVector");
        loadedCentralities[10] = isalreadyloaded("CentiScaPe Bridging");
        loadedCentralities[11] = isalreadyloaded("CentiScaPe Edge Betweenness");
        for (int i = 0; i < numberofcentralities; i++) {
            if (selectedCentralities[i] & loadedCentralities[i]) {
                loadedcentralities++;
                switch (i) {
                    case 0:
                        stringcentralities = stringcentralities + "Diameter, ";
                        break;
                    case 1:
                        stringcentralities = stringcentralities + "Average Distance, ";
                        break;
                    case 2:
                        stringcentralities = stringcentralities + "Degree, ";
                        break;
                    case 3:
                        stringcentralities = stringcentralities + "Eccentricity, ";
                        break;
                    case 4:
                        stringcentralities = stringcentralities + "Radiality, ";
                        break;
                    case 5:
                        stringcentralities = stringcentralities + "Closeness, ";
                        break;
                    case 6:
                        stringcentralities = stringcentralities + "Stress, ";
                        break;
                    case 7:
                        stringcentralities = stringcentralities + "Betweenness, ";
                        break;
                    case 8:
                        stringcentralities = stringcentralities + "Centroid value, ";
                        break;
                    case 9:
                        stringcentralities = stringcentralities + "EigenVector, ";
                        break;
                    case 10:
                        stringcentralities = stringcentralities + "Bridging, ";
                        break;
                    case 11:
                        stringcentralities = stringcentralities + "Edge Betweenness, ";
                        break;
                }
            }
        }
        if (loadedcentralities == 1) {
            stringcentralities = stringcentralities.substring(0, stringcentralities.length() - 2) + " is ";
        } else if (loadedcentralities > 1) {
            stringcentralities = stringcentralities.substring(0, stringcentralities.length() - 2);
            stringcentralities = stringcentralities.substring(0, stringcentralities.lastIndexOf(',')) + " and" + stringcentralities.substring(stringcentralities.lastIndexOf(',') + 1) + " are ";
        } else {
            stringcentralities = null;
        }
        return stringcentralities;
    }

    public boolean isalreadyloaded(String centralitystring) {
        Collection columnlist = currentnetwork.getDefaultNodeTable().getColumns();
        boolean result = false;
        String currentcentrality;
        for (Iterator i = columnlist.iterator(); i.hasNext();) {
            currentcentrality = ((CyColumn) i.next()).getName();
            if (centralitystring.equals(currentcentrality)) {
                result = true;
                return result;
            }
        }
        columnlist = currentnetwork.getDefaultEdgeTable().getColumns();
        for (Iterator i = columnlist.iterator(); i.hasNext();) {
            currentcentrality = ((CyColumn) i.next()).getName();
            if (centralitystring.equals(currentcentrality)) {
                result = true;
                return result;
            }
        }
        return result;
    }

    public void verifyselection() {
        if (DiameterCheckBox.isSelected()
                || AverageDistanceCheckBox.isSelected()
                || DegreeCheckBox.isSelected()
                || EccentricityCheckBox.isSelected()
                || RadialityCheckBox.isSelected()
                || ClosenessCheckBox.isSelected()
                || StressCheckBox.isSelected()
                || BetweennessCheckBox.isSelected()
                || CentroidCheckBox.isSelected()
                || EigenVectorCheckBox.isSelected()
                || BridgingCheckBox.isSelected()
                || EdgeBetweennessCheckBox.isSelected()) {
            StartButton.setEnabled(true);
        } else {
            StartButton.setEnabled(false);
        }
    }

    public Component getComponent() {
        return this;
    }

    public CytoPanelName getCytoPanelName() {
        return CytoPanelName.WEST;
    }

    public String getTitle() {
        return "CentiScaPe";
    }

    public Icon getIcon() {
        return null;
    }

    public void jTextPanelsetText(String set) {
        jLabelServerResponse.setText(set);
    }
}

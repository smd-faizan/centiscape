/*
 * CentVisualizer.java
 *
 * Created on 18 dicembre 2007, 12.11
 */
package org.cytoscape.centiscape.internal.visualizer;

import java.awt.Component;
import java.awt.Toolkit;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;
import javax.swing.BoxLayout;
import javax.swing.Icon;
import javax.swing.JPanel;
import org.cytoscape.application.CyApplicationManager;
import org.cytoscape.application.swing.CytoPanelComponent;
import org.cytoscape.application.swing.CytoPanelName;
import org.cytoscape.model.CyEdge;
import org.cytoscape.model.CyNetwork;
import org.cytoscape.model.CyNode;
import org.cytoscape.model.CyTable;
import org.cytoscape.view.model.CyNetworkView;




/**
 *
 * @author  admini
 */
public class CentVisualizer extends javax.swing.JPanel implements Observer, CytoPanelComponent {

    private BoxLayout CentralitiesSelectorLayout;
    public CyNetwork currentnetwork;
    public CyNetworkView currentview;
//    private PlotBy plotBy;
    // passed centralities vector
    public  static Vector<Centrality> centralities;
    // centralities panels vector generated by centralities
    private Vector<CentralityPanel> centralityPanels;

    // visual options panel
    private CentVisualOptions vo;
    private boolean firstTime;

    /** Creates new form CentVisualizer */
    public CentVisualizer(CyApplicationManager cyApplicationManager) {
        initComponents();
        //System.out.println("visualizer 1.5 backporting on");
        firstTime = true;
        currentnetwork = cyApplicationManager.getCurrentNetwork();
        currentview = cyApplicationManager.getCurrentNetworkView();
        CentralitiesSelectorLayout = null;
        vo = new CentVisualOptions(currentview);
        vo.addObserver(this);
    }

    // detach event listening CentralityPanel objects from CentralitySelector
    // and remove them from centralities selector
    private void detachCentralitiesSelector() {
        for (Iterator it = centralityPanels.iterator(); it.hasNext();) {
            CentralityPanel cp = (CentralityPanel) it.next();
            cp.notifier.deleteObservers();
            CentralitiesSelector.remove(cp);
        }
//        vo.notifier.deleteObservers(); // remove the observer for this window
//        CentralitiesSelector.remove(vo);
        CentralitiesSelector.removeAll(); // remove other components without attachment
    }
    

    public void setEnabled(Vector<Centrality> vc) {

        super.setVisible(false);
        
        if (firstTime) {
            // set the layout for visualizing panels in box mode
            CentralitiesSelectorLayout = new BoxLayout(CentralitiesSelector, BoxLayout.Y_AXIS);
            CentralitiesSelector.setLayout(CentralitiesSelectorLayout);
            firstTime=false;
        } else {
            // remove old centrality panels
            detachCentralitiesSelector();
        }
        // centrality passed
        centralities = vc;
        // create opportune centrality panel
        updateCentralityPanels(centralities);
        // AND / OR options panel
        addOptionsPanel(vo);
        
        super.setVisible(true);
        try {
            Thread.sleep(50);
        } catch (InterruptedException e) {
        }
        
      //  Cytoscape.getCurrentNetwork().unselectAllNodes();
        updateSelection();
        

    }

    // one observed slider has been moved => update view
    public void update(Observable o, Object arg) {
        CentralityPanel cp = (CentralityPanel) arg;
        updateSelection();
    }

    private void updateSelection() {
     //   CyAttributes ca;
        CyTable nodecytable = currentnetwork.getDefaultNodeTable();
       /* try{
        Toolkit.getDefaultToolkit().getSystemEventQueue().invokeAndWait(null);
        }
        catch (InterruptedException e){
        }
        catch (InvocationTargetException e){
            
        }*/
        ArrayList<CyNode> selYes = new ArrayList();
        ArrayList<CyNode> selNo = new ArrayList();
    //    for (Iterator it = Cytoscape.getCurrentNetwork().nodesIterator(); it.hasNext();) {
       for (Iterator it = currentnetwork.getNodeList().listIterator(); it.hasNext();) {
        CyNode elem = (CyNode) it.next();

            if (isASelectedNode(elem)) {
                selYes.add(elem);
                //System.out.println("setto a vero il nodo " + elem.getSUID());
                nodecytable.getRow(elem.getSUID()).set("selected", true);
          //  Cytoscape.getCurrentNetwork().setSelectedNodeState(elem, true);
            } else {
                selNo.add(elem);
                  //System.out.println("setto a falso il nodo " + elem.getSUID());
                  nodecytable.getRow(elem.getSUID()).set("selected", false);
         //   Cytoscape.getCurrentNetwork().setSelectedNodeState(elem, false);
            }
            
            currentview.updateView();
        }
       // update the network selection by using threasold value
       CyTable edgecytable = currentnetwork.getDefaultEdgeTable();
        ArrayList<CyEdge> selEdgeYes = new ArrayList();
        ArrayList<CyEdge> selEdgeNo = new ArrayList();
    for (Iterator edgeit = currentnetwork.getEdgeList().listIterator(); edgeit.hasNext();) {
        CyEdge edge = (CyEdge) edgeit.next();

            if (isASelectedEdge(edge)) {
                selEdgeYes.add(edge);
                //System.out.println("setting selected trur for edge " + edge.getSUID());
                edgecytable.getRow(edge.getSUID()).set("selected", true);
               
          
            } else {
                selEdgeNo.add(edge);
                  //System.out.println("setto a falso il nodo " + elem.getSUID());
                //System.out.println("setting selected false for edge " + edge.getSUID());
                  edgecytable.getRow(edge.getSUID()).set("selected", false);
         
            }
            currentview.updateView();
        }
       
       /////RISISTEMARE
     //   Cytoscape.getCurrentNetwork().setSelectedNodeState(selYes, true);
     //   Cytoscape.getCurrentNetwork().setSelectedNodeState(selNo, false);
     //   Cytoscape.getCurrentNetworkView().redrawGraph(true, true);
    }

    // say true if c satisfies every threshold requests and filter requests
    private boolean isASelectedNode(CyNode c) {
        
        boolean res = true;
        boolean finished = false;
        boolean isAnd = vo.isAnd;
      //  CyAttributes cattr = Cytoscape.getNodeAttributes();
        CyTable nodetable = currentnetwork.getDefaultNodeTable();
        for (Iterator it = centralityPanels.iterator(); (it.hasNext() && (!finished));) {
            CentralityPanel cp = (CentralityPanel) it.next();
            if(!(cp.cent.getName().equals("CentiScaPe Edge Betweenness"))){
                //System.out.println("in Node section");
            if (cp.isActive) {
                if (isAnd) {
                    if (cp.minor) {
                        // less than threshold wanted
                     if ( nodetable.getRow(c.getSUID()).get(cp.cent.getName(), Double.class) > cp.threshold) {
                        
                        //   if (cattr.getDoubleAttribute(c.getIdentifier(), cp.cent.getName()) > cp.threshold) {
                            res = false;
                            finished = true;
                        }
                    } else {
                        // more than threshold wanted
                        if ( nodetable.getRow(c.getSUID()).get(cp.cent.getName(), Double.class) < cp.threshold) {
                              //  (cattr.getDoubleAttribute(c.getIdentifier(), cp.cent.getName()) < cp.threshold) {
                            res = false;
                            finished = true;
                        }
                    }
                } // OR semantic
                else {
                    res = false;
                    if (cp.minor) {
                        // less than threshold wanted:if AT LEAST one is ok => stop evaluating and say OK!
                        if ( nodetable.getRow(c.getSUID()).get(cp.cent.getName(), Double.class) <= cp.threshold) {
                            //    (cattr.getDoubleAttribute(c.getIdentifier(), cp.cent.getName()) <= cp.threshold) {
                            res = true;
                            finished = true;
                        }
                    } else {
                        // more than threshold wanted
                       if ( nodetable.getRow(c.getSUID()).get(cp.cent.getName(), Double.class) >= cp.threshold) {
                      //  if (cattr.getDoubleAttribute(c.getIdentifier(), cp.cent.getName()) >= cp.threshold) {
                            res = true;
                            finished = true;
                        }
                    }
                }
            }
            }
        }
        return (res);
       // return false;
    }
    
    // say true if c satisfies every threshold requests and filter requests
    private boolean isASelectedEdge(CyEdge c) {
        
        boolean res = true;
        boolean finished = false;
        boolean isAnd = vo.isAnd;
      //  CyAttributes cattr = Cytoscape.getNodeAttributes();
        CyTable edgetable = currentnetwork.getDefaultEdgeTable();
        for (Iterator it = centralityPanels.iterator(); (it.hasNext() && (!finished));) {
            CentralityPanel cp = (CentralityPanel) it.next();
            if(cp.cent.getName().equals("CentiScaPe Edge Betweenness") ){
                //System.out.println("in Edge section");
            if (cp.isActive) {
                if (isAnd) {
                    if (cp.minor) {
                        // less than threshold wanted
                     if ( edgetable.getRow(c.getSUID()).get(cp.cent.getName(), Double.class) > cp.threshold) {
                        
                        //   if (cattr.getDoubleAttribute(c.getIdentifier(), cp.cent.getName()) > cp.threshold) {
                            res = false;
                            finished = true;
                        }
                    } else {
                        // more than threshold wanted
                        if ( edgetable.getRow(c.getSUID()).get(cp.cent.getName(), Double.class) < cp.threshold) {
                              //  (cattr.getDoubleAttribute(c.getIdentifier(), cp.cent.getName()) < cp.threshold) {
                            res = false;
                            finished = true;
                        }
                    }
                } // OR semantic
                else {
                    res = false;
                    if (cp.minor) {
                        // less than threshold wanted:if AT LEAST one is ok => stop evaluating and say OK!
                        if ( edgetable.getRow(c.getSUID()).get(cp.cent.getName(), Double.class) <= cp.threshold) {
                            //    (cattr.getDoubleAttribute(c.getIdentifier(), cp.cent.getName()) <= cp.threshold) {
                            res = true;
                            finished = true;
                        }
                    } else {
                        // more than threshold wanted
                       if ( edgetable.getRow(c.getSUID()).get(cp.cent.getName(), Double.class) >= cp.threshold) {
                      //  if (cattr.getDoubleAttribute(c.getIdentifier(), cp.cent.getName()) >= cp.threshold) {
                            res = true;
                            finished = true;
                        }
                    }
                }
            }
            }
        }
        return (res);
       // return false;
    }
    // add a centralityPanel to centralitiesSelector
    public void addCentralityPanel(CentralityPanel cp) {
        cp.setAlignmentX(Component.LEFT_ALIGNMENT);
        CentralitiesSelector.add(cp);
        centralityPanels.add(cp);
    }

    // add the AND/OR option panel to centralitiesSelector
    public void addOptionsPanel(JPanel op) {
        op.setAlignmentX(Component.LEFT_ALIGNMENT);
        CentralitiesSelector.add(op);
    }

    public void updateCentralityPanels(Vector<Centrality> centralities) {
        centralityPanels=new Vector();
        for (Iterator it = centralities.iterator(); it.hasNext();) {
            Centrality elem = (Centrality) it.next();
            //JOptionPane.showMessageDialog(this, "pre "+elem.getName());
            CentralityPanel cp = CentralityPanelFactory.allocateCentralityPanel(this, elem);
            //JOptionPane.showMessageDialog(this, "post "+elem.getName());
            //System.out.println("post allocate");
            this.addCentralityPanel(cp);
        }
        // also update combo boxes...
        vo.loadCentralities(centralities);
        vo.loadNodesList();
    }

//    private Vector<Centrality> generateCentralitiesVector() {
//        Vector<Centrality> vc = new Vector();
//        for (int i = 0; i < 5; i++) {
//            System.out.println("generazione di centrality" + Integer.toString(i));
//            Centrality c = new FakeCentrality("centrality" + Integer.toString(i));
//            vc.add(c);
//        }
//        return (vc);
//    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        CentralitiesSelector = new javax.swing.JPanel();

        CentralitiesSelector.setMaximumSize(new java.awt.Dimension(500, 32767));

        org.jdesktop.layout.GroupLayout CentralitiesSelectorLayout = new org.jdesktop.layout.GroupLayout(CentralitiesSelector);
        CentralitiesSelector.setLayout(CentralitiesSelectorLayout);
        CentralitiesSelectorLayout.setHorizontalGroup(
            CentralitiesSelectorLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 463, Short.MAX_VALUE)
        );
        CentralitiesSelectorLayout.setVerticalGroup(
            CentralitiesSelectorLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 491, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(CentralitiesSelector);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CentralitiesSelector;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

 public Component getComponent() {
		return this;
	}


	public CytoPanelName getCytoPanelName() {
		return CytoPanelName.EAST;
	}


	public String getTitle() {
		return "CentiScaPe Results";
	}


	public Icon getIcon() {
		return null;
	}



}
